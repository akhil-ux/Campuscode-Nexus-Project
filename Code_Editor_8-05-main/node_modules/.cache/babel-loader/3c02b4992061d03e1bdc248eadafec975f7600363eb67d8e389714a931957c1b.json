{"ast":null,"code":"var _jsxFileName = \"D:\\\\psit\\\\campuscode nexus\\\\Code_Editor_8-05-main\\\\src\\\\Providers\\\\PlaygroundProvider.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { json } from \"react-router-dom\";\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaygroundContext = /*#__PURE__*/createContext();\nconst initialData = [{\n  id: v4(),\n  title: 'Spring Boot',\n  files: [{\n    id: v4(),\n    title: 'index',\n    code: 'cout<<hello world;',\n    language: 'cpp'\n  }]\n}, {\n  id: v4(),\n  title: 'Frontend',\n  files: [{\n    id: v4(),\n    title: 'test',\n    code: 'console.log(\"hello frontend\");',\n    language: 'javascript'\n  }]\n}];\nexport const defaultCodes = {\n  'cpp': `\n  #include <iostream>\n  int main()\n    {      \n    std::cout<<\"Hello World\";\n    return 0;\n    }\n  `,\n  'javascript': `console.log(\"hello world\")`,\n  'python': `print(\"hello python\")`,\n  'java': `\n  public class Main\n{\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n  `\n};\nexport const PlaygroundProvider = ({\n  children\n}) => {\n  _s();\n  const [folders, setFolders] = useState(() => {\n    const localData = localStorage.getItem('data');\n    try {\n      if (localData) {\n        return JSON.parse(localData); // Only parse if it's valid JSON\n      }\n    } catch (error) {\n      console.error('Error parsing JSON from localStorage:', error);\n      // Optionally, clear the corrupted data\n      localStorage.removeItem('data');\n    }\n    return initialData; // Fallback if localStorage is empty or invalid\n  });\n  const createNewPlayground = newPlayground => {\n    const {\n      fileName,\n      folderName,\n      language\n    } = newPlayground;\n    const newFolders = [...folders];\n    newFolders.push({\n      id: v4(),\n      title: folderName,\n      files: [{\n        id: v4(),\n        title: fileName,\n        code: defaultCodes[language],\n        language\n      }]\n    });\n    localStorage.setItem('data', JSON.stringify(newFolders));\n    setFolders(newFolders);\n  };\n  const createNewFolder = folderName => {\n    const newFolder = {\n      id: v4(),\n      title: folderName,\n      files: []\n    };\n    const allFolders = [...folders, newFolder];\n    localStorage.setItem('data', JSON.stringify(allFolders));\n    setFolders(allFolders);\n  };\n  const deleteFolder = id => {\n    const updatedFoldersList = folders.filter(folderItem => {\n      return folderItem.id !== id;\n    });\n    localStorage.setItem('data', JSON.stringify(updatedFoldersList));\n    setFolders(updatedFoldersList);\n  };\n  const editFolderTitle = (newFolderName, id) => {\n    const updatedFoldersList = folders.map(folderItem => {\n      if (folderItem.id === id) {\n        folderItem.title = newFolderName;\n      }\n      return folderItem;\n    });\n    localStorage.setItem('data', JSON.stringify(updatedFoldersList));\n    setFolders(updatedFoldersList);\n  };\n  const editFileTitle = (newFileName, folderId, fileId) => {\n    const copiedFolders = [...folders];\n    for (let i = 0; i < copiedFolders.length; i++) {\n      if (folderId === copiedFolders[i].id) {\n        const files = copiedFolders[i].files;\n        for (let j = 0; j < files.length; j++) {\n          if (files[i].id === fileId) {\n            files[i].title = newFileName;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(copiedFolders));\n    setFolders(copiedFolders);\n  };\n  const deleteFile = (folderId, fileId) => {\n    const copiedFolders = [...folders];\n    for (let i = 0; i < copiedFolders.length; i++) {\n      if (copiedFolders[i].id === folderId) {\n        const files = [...copiedFolders[i].files];\n        copiedFolders[i].files = files.filter(file => {\n          return file.id !== fileId;\n        });\n        break;\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(copiedFolders));\n    setFolders(copiedFolders);\n  };\n  const createPlayground = (folderId, file) => {\n    const copiedFolders = [...folders];\n    for (let i = 0; i < copiedFolders.length; i++) {\n      if (copiedFolders[i].id === folderId) {\n        copiedFolders[i].files.push(file);\n        break;\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(copiedFolders));\n    setFolders(folders);\n  };\n  const getDefaultCode = (fileId, folderId) => {\n    for (let i = 0; i < folders.length; i++) {\n      if (folders[i].id === folderId) {\n        for (let j = 0; j < folders[i].files.length; j++) {\n          const currentFile = folders[i].files[j];\n          if (fileId === currentFile.id) {\n            return currentFile.code;\n          }\n        }\n      }\n    }\n  };\n  const updateLanguage = (fileId, folderId, language) => {\n    const newFolders = [...folders];\n    for (let i = 0; i < newFolders.length; i++) {\n      if (newFolders[i].id === folderId) {\n        for (let j = 0; j < newFolders[i].files.length; j++) {\n          const currentFile = newFolders[i].files[j];\n          if (fileId === currentFile.id) {\n            newFolders[i].files[j].code = defaultCodes[language];\n            newFolders[i].files[j].language = language;\n          }\n        }\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(newFolders));\n    setFolders(newFolders);\n  };\n  const getLanguage = (fileId, folderId) => {\n    for (let i = 0; i < folders.length; i++) {\n      if (folders[i].id === folderId) {\n        for (let j = 0; j < folders[i].files.length; j++) {\n          const currentFile = folders[i].files[j];\n          if (fileId === currentFile.id) {\n            return currentFile.language;\n          }\n        }\n      }\n    }\n  };\n  const saveCode = (fileId, folderId, newCode) => {\n    const newFolders = [...folders];\n    for (let i = 0; i < newFolders.length; i++) {\n      if (newFolders[i].id === folderId) {\n        for (let j = 0; j < newFolders[i].files.length; j++) {\n          const currentFile = newFolders[i].files[j];\n          if (fileId === currentFile.id) {\n            newFolders[i].files[j].code = newCode;\n          }\n        }\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(newFolders));\n    setFolders(newFolders);\n  };\n  useEffect(() => {\n    if (!localStorage.getItem('data')) {\n      localStorage.setItem('data', JSON.stringify(folders));\n    }\n  }, []);\n  const playgroundFeatures = {\n    folders,\n    createNewPlayground,\n    createNewFolder,\n    deleteFolder,\n    editFolderTitle,\n    editFileTitle,\n    deleteFile,\n    createPlayground,\n    getDefaultCode,\n    getLanguage,\n    updateLanguage,\n    saveCode\n  };\n  return /*#__PURE__*/_jsxDEV(PlaygroundContext.Provider, {\n    value: playgroundFeatures,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 7\n  }, this);\n};\n_s(PlaygroundProvider, \"FRdyjcYKdsBF37vH2nZf2OZcwAw=\");\n_c = PlaygroundProvider;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","json","v4","jsxDEV","_jsxDEV","PlaygroundContext","initialData","id","title","files","code","language","defaultCodes","PlaygroundProvider","children","_s","folders","setFolders","localData","localStorage","getItem","JSON","parse","error","console","removeItem","createNewPlayground","newPlayground","fileName","folderName","newFolders","push","setItem","stringify","createNewFolder","newFolder","allFolders","deleteFolder","updatedFoldersList","filter","folderItem","editFolderTitle","newFolderName","map","editFileTitle","newFileName","folderId","fileId","copiedFolders","i","length","j","deleteFile","file","createPlayground","getDefaultCode","currentFile","updateLanguage","getLanguage","saveCode","newCode","playgroundFeatures","Provider","value","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/psit/campuscode nexus/Code_Editor_8-05-main/src/Providers/PlaygroundProvider.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { json } from \"react-router-dom\";\nimport {v4} from 'uuid'\n\nexport const PlaygroundContext=createContext();\n\n\nconst initialData=[\n  {\n    id: v4(),\n    title: 'Spring Boot',\n    files:[\n      {\n        id: v4(),\n        title: 'index',\n        code: 'cout<<hello world;',\n        language: 'cpp'\n      }\n    ]\n  },\n  {\n    id: v4(),\n    title: 'Frontend',\n    files:[\n      {\n        id: v4(),\n        title: 'test',\n        code: 'console.log(\"hello frontend\");',\n        language: 'javascript'\n      }\n    ]\n  }\n];\n\nexport const defaultCodes = {\n  'cpp': `\n  #include <iostream>\n  int main()\n    {      \n    std::cout<<\"Hello World\";\n    return 0;\n    }\n  `,\n  'javascript': `console.log(\"hello world\")`,\n  'python': `print(\"hello python\")`,\n  'java': `\n  public class Main\n{\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n  `\n}\n\nexport const PlaygroundProvider = ({ children }) => {\n  const [folders, setFolders] = useState(() => {\n    const localData = localStorage.getItem('data');\n    try {\n      if (localData) {\n        return JSON.parse(localData);  // Only parse if it's valid JSON\n      }\n    } catch (error) {\n      console.error('Error parsing JSON from localStorage:', error);\n      // Optionally, clear the corrupted data\n      localStorage.removeItem('data');\n    }\n    return initialData;  // Fallback if localStorage is empty or invalid\n  });\n  const createNewPlayground = (newPlayground) => {\n      const {fileName, folderName, language} = newPlayground;\n      const newFolders = [...folders];\n      newFolders.push({\n        id: v4(),\n        title: folderName,\n        files: [\n          {\n            id:v4(),\n            title: fileName,\n            code: defaultCodes[language],\n            language\n          }\n        ]\n      })\n      localStorage.setItem('data', JSON.stringify(newFolders));\n      setFolders(newFolders);\n  }\n\n  const createNewFolder = (folderName) => {\n      const newFolder = {\n        id: v4(),\n        title: folderName,\n        files: []\n      }\n\n      const allFolders = [...folders, newFolder]\n      localStorage.setItem('data', JSON.stringify(allFolders));\n      setFolders(allFolders)\n  }\n  \n  const deleteFolder = (id) => {\n\n      const updatedFoldersList = folders.filter((folderItem) => {\n        return folderItem.id !== id;\n      })\n\n      localStorage.setItem('data', JSON.stringify(updatedFoldersList));\n      setFolders(updatedFoldersList)\n  }\n\n  const editFolderTitle = (newFolderName, id) => {\n    const updatedFoldersList = folders.map((folderItem) => {\n      if(folderItem.id === id){\n        folderItem.title = newFolderName\n      }\n      return folderItem;\n    })\n    localStorage.setItem('data', JSON.stringify(updatedFoldersList));\n    setFolders(updatedFoldersList);\n  }\n\n  const editFileTitle = (newFileName, folderId, fileId) => {\n      const copiedFolders = [...folders];\n      for(let i=0;i<copiedFolders.length;i++){\n        if(folderId === copiedFolders[i].id){\n          const files = copiedFolders[i].files\n          for(let j=0;j<files.length;j++){\n            if(files[i].id === fileId){\n              files[i].title = newFileName;\n              break;\n            }\n          }\n          break;\n        } \n      }\n\n      localStorage.setItem('data', JSON.stringify(copiedFolders));\n      setFolders(copiedFolders);\n  }\n\n  const deleteFile = (folderId, fileId) => {\n    const copiedFolders = [...folders]\n    for(let i=0;i<copiedFolders.length;i++){\n      if(copiedFolders[i].id === folderId){\n          const files=[...copiedFolders[i].files];\n          copiedFolders[i].files = files.filter((file) => {\n            return file.id !== fileId;\n          })\n          break;\n      }\n    }\n\n    localStorage.setItem('data', JSON.stringify(copiedFolders));\n    setFolders(copiedFolders);\n  }\n\n  const createPlayground = (folderId, file) => {\n      const copiedFolders = [...folders]\n      for(let i=0;i<copiedFolders.length;i++){\n        if(copiedFolders[i].id === folderId){\n          copiedFolders[i].files.push(file);\n          break;\n        }\n      }\n\n      localStorage.setItem('data', JSON.stringify(copiedFolders));\n      setFolders(folders);\n  }\n\n  const getDefaultCode = (fileId, folderId) => {\n      for(let i=0;i<folders.length;i++){\n        if(folders[i].id === folderId){\n          for(let j=0;j<folders[i].files.length;j++){\n            const currentFile = folders[i].files[j]\n            if(fileId === currentFile.id){\n                return currentFile.code;\n            }\n          }\n        }\n      }\n  }\n\n  const updateLanguage = (fileId, folderId, language) => {\n    const newFolders = [...folders]\n    for(let i=0;i<newFolders.length;i++){\n      if(newFolders[i].id === folderId){\n        for(let j=0;j<newFolders[i].files.length;j++){\n          const currentFile = newFolders[i].files[j]\n          if(fileId === currentFile.id){\n              newFolders[i].files[j].code = defaultCodes[language]\n              newFolders[i].files[j].language = language;\n          }\n        }\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(newFolders));\n    setFolders(newFolders);\n  }\n\n  const getLanguage = (fileId, folderId) => {\n    for(let i=0;i<folders.length;i++){\n      if(folders[i].id === folderId){\n        for(let j=0;j<folders[i].files.length;j++){\n          const currentFile = folders[i].files[j]\n          if(fileId === currentFile.id){\n              return currentFile.language;\n          }\n        }\n      }\n    }\n}\n\n  const saveCode = (fileId, folderId, newCode) => {\n    const newFolders = [...folders]\n    for(let i=0;i<newFolders.length;i++){\n      if(newFolders[i].id === folderId){\n        for(let j=0;j<newFolders[i].files.length;j++){\n          const currentFile = newFolders[i].files[j]\n          if(fileId === currentFile.id){\n              newFolders[i].files[j].code = newCode;\n          }\n        }\n      }\n    }\n    localStorage.setItem('data', JSON.stringify(newFolders));\n    setFolders(newFolders)\n  }\n\n  useEffect(() => {\n      if(!localStorage.getItem('data')){\n        localStorage.setItem('data', JSON.stringify(folders))\n      }\n  }, [])\n  \n  const playgroundFeatures = {\n     folders,\n     createNewPlayground,\n     createNewFolder,\n     deleteFolder,\n     editFolderTitle,\n     editFileTitle,\n     deleteFile,\n     createPlayground,\n     getDefaultCode,\n     getLanguage,\n     updateLanguage,\n     saveCode\n  }\n\n  return(\n      <PlaygroundContext.Provider value={playgroundFeatures}>\n        {children}\n      </PlaygroundContext.Provider>\n  );\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAAQC,EAAE,QAAO,MAAM;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,OAAO,MAAMC,iBAAiB,gBAACR,aAAa,CAAC,CAAC;AAG9C,MAAMS,WAAW,GAAC,CAChB;EACEC,EAAE,EAAEL,EAAE,CAAC,CAAC;EACRM,KAAK,EAAE,aAAa;EACpBC,KAAK,EAAC,CACJ;IACEF,EAAE,EAAEL,EAAE,CAAC,CAAC;IACRM,KAAK,EAAE,OAAO;IACdE,IAAI,EAAE,oBAAoB;IAC1BC,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEJ,EAAE,EAAEL,EAAE,CAAC,CAAC;EACRM,KAAK,EAAE,UAAU;EACjBC,KAAK,EAAC,CACJ;IACEF,EAAE,EAAEL,EAAE,CAAC,CAAC;IACRM,KAAK,EAAE,MAAM;IACbE,IAAI,EAAE,gCAAgC;IACtCC,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAG;EAC1B,KAAK,EAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EACD,YAAY,EAAE,4BAA4B;EAC1C,QAAQ,EAAE,uBAAuB;EACjC,MAAM,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,MAAM;IAC3C,MAAMkB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAI;MACF,IAAIF,SAAS,EAAE;QACb,OAAOG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC,CAAE;MACjC;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D;MACAJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IACjC;IACA,OAAOnB,WAAW,CAAC,CAAE;EACvB,CAAC,CAAC;EACF,MAAMoB,mBAAmB,GAAIC,aAAa,IAAK;IAC3C,MAAM;MAACC,QAAQ;MAAEC,UAAU;MAAElB;IAAQ,CAAC,GAAGgB,aAAa;IACtD,MAAMG,UAAU,GAAG,CAAC,GAAGd,OAAO,CAAC;IAC/Bc,UAAU,CAACC,IAAI,CAAC;MACdxB,EAAE,EAAEL,EAAE,CAAC,CAAC;MACRM,KAAK,EAAEqB,UAAU;MACjBpB,KAAK,EAAE,CACL;QACEF,EAAE,EAACL,EAAE,CAAC,CAAC;QACPM,KAAK,EAAEoB,QAAQ;QACflB,IAAI,EAAEE,YAAY,CAACD,QAAQ,CAAC;QAC5BA;MACF,CAAC;IAEL,CAAC,CAAC;IACFQ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACH,UAAU,CAAC,CAAC;IACxDb,UAAU,CAACa,UAAU,CAAC;EAC1B,CAAC;EAED,MAAMI,eAAe,GAAIL,UAAU,IAAK;IACpC,MAAMM,SAAS,GAAG;MAChB5B,EAAE,EAAEL,EAAE,CAAC,CAAC;MACRM,KAAK,EAAEqB,UAAU;MACjBpB,KAAK,EAAE;IACT,CAAC;IAED,MAAM2B,UAAU,GAAG,CAAC,GAAGpB,OAAO,EAAEmB,SAAS,CAAC;IAC1ChB,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACG,UAAU,CAAC,CAAC;IACxDnB,UAAU,CAACmB,UAAU,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAI9B,EAAE,IAAK;IAEzB,MAAM+B,kBAAkB,GAAGtB,OAAO,CAACuB,MAAM,CAAEC,UAAU,IAAK;MACxD,OAAOA,UAAU,CAACjC,EAAE,KAAKA,EAAE;IAC7B,CAAC,CAAC;IAEFY,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACK,kBAAkB,CAAC,CAAC;IAChErB,UAAU,CAACqB,kBAAkB,CAAC;EAClC,CAAC;EAED,MAAMG,eAAe,GAAGA,CAACC,aAAa,EAAEnC,EAAE,KAAK;IAC7C,MAAM+B,kBAAkB,GAAGtB,OAAO,CAAC2B,GAAG,CAAEH,UAAU,IAAK;MACrD,IAAGA,UAAU,CAACjC,EAAE,KAAKA,EAAE,EAAC;QACtBiC,UAAU,CAAChC,KAAK,GAAGkC,aAAa;MAClC;MACA,OAAOF,UAAU;IACnB,CAAC,CAAC;IACFrB,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACK,kBAAkB,CAAC,CAAC;IAChErB,UAAU,CAACqB,kBAAkB,CAAC;EAChC,CAAC;EAED,MAAMM,aAAa,GAAGA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,MAAM,KAAK;IACrD,MAAMC,aAAa,GAAG,CAAC,GAAGhC,OAAO,CAAC;IAClC,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,aAAa,CAACE,MAAM,EAACD,CAAC,EAAE,EAAC;MACrC,IAAGH,QAAQ,KAAKE,aAAa,CAACC,CAAC,CAAC,CAAC1C,EAAE,EAAC;QAClC,MAAME,KAAK,GAAGuC,aAAa,CAACC,CAAC,CAAC,CAACxC,KAAK;QACpC,KAAI,IAAI0C,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC1C,KAAK,CAACyC,MAAM,EAACC,CAAC,EAAE,EAAC;UAC7B,IAAG1C,KAAK,CAACwC,CAAC,CAAC,CAAC1C,EAAE,KAAKwC,MAAM,EAAC;YACxBtC,KAAK,CAACwC,CAAC,CAAC,CAACzC,KAAK,GAAGqC,WAAW;YAC5B;UACF;QACF;QACA;MACF;IACF;IAEA1B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACe,aAAa,CAAC,CAAC;IAC3D/B,UAAU,CAAC+B,aAAa,CAAC;EAC7B,CAAC;EAED,MAAMI,UAAU,GAAGA,CAACN,QAAQ,EAAEC,MAAM,KAAK;IACvC,MAAMC,aAAa,GAAG,CAAC,GAAGhC,OAAO,CAAC;IAClC,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,aAAa,CAACE,MAAM,EAACD,CAAC,EAAE,EAAC;MACrC,IAAGD,aAAa,CAACC,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAChC,MAAMrC,KAAK,GAAC,CAAC,GAAGuC,aAAa,CAACC,CAAC,CAAC,CAACxC,KAAK,CAAC;QACvCuC,aAAa,CAACC,CAAC,CAAC,CAACxC,KAAK,GAAGA,KAAK,CAAC8B,MAAM,CAAEc,IAAI,IAAK;UAC9C,OAAOA,IAAI,CAAC9C,EAAE,KAAKwC,MAAM;QAC3B,CAAC,CAAC;QACF;MACJ;IACF;IAEA5B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACe,aAAa,CAAC,CAAC;IAC3D/B,UAAU,CAAC+B,aAAa,CAAC;EAC3B,CAAC;EAED,MAAMM,gBAAgB,GAAGA,CAACR,QAAQ,EAAEO,IAAI,KAAK;IACzC,MAAML,aAAa,GAAG,CAAC,GAAGhC,OAAO,CAAC;IAClC,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,aAAa,CAACE,MAAM,EAACD,CAAC,EAAE,EAAC;MACrC,IAAGD,aAAa,CAACC,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAClCE,aAAa,CAACC,CAAC,CAAC,CAACxC,KAAK,CAACsB,IAAI,CAACsB,IAAI,CAAC;QACjC;MACF;IACF;IAEAlC,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACe,aAAa,CAAC,CAAC;IAC3D/B,UAAU,CAACD,OAAO,CAAC;EACvB,CAAC;EAED,MAAMuC,cAAc,GAAGA,CAACR,MAAM,EAAED,QAAQ,KAAK;IACzC,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACjC,OAAO,CAACkC,MAAM,EAACD,CAAC,EAAE,EAAC;MAC/B,IAAGjC,OAAO,CAACiC,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAC5B,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnC,OAAO,CAACiC,CAAC,CAAC,CAACxC,KAAK,CAACyC,MAAM,EAACC,CAAC,EAAE,EAAC;UACxC,MAAMK,WAAW,GAAGxC,OAAO,CAACiC,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC;UACvC,IAAGJ,MAAM,KAAKS,WAAW,CAACjD,EAAE,EAAC;YACzB,OAAOiD,WAAW,CAAC9C,IAAI;UAC3B;QACF;MACF;IACF;EACJ,CAAC;EAED,MAAM+C,cAAc,GAAGA,CAACV,MAAM,EAAED,QAAQ,EAAEnC,QAAQ,KAAK;IACrD,MAAMmB,UAAU,GAAG,CAAC,GAAGd,OAAO,CAAC;IAC/B,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnB,UAAU,CAACoB,MAAM,EAACD,CAAC,EAAE,EAAC;MAClC,IAAGnB,UAAU,CAACmB,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAC/B,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACrB,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAACyC,MAAM,EAACC,CAAC,EAAE,EAAC;UAC3C,MAAMK,WAAW,GAAG1B,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC;UAC1C,IAAGJ,MAAM,KAAKS,WAAW,CAACjD,EAAE,EAAC;YACzBuB,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC,CAACzC,IAAI,GAAGE,YAAY,CAACD,QAAQ,CAAC;YACpDmB,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC,CAACxC,QAAQ,GAAGA,QAAQ;UAC9C;QACF;MACF;IACF;IACAQ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACH,UAAU,CAAC,CAAC;IACxDb,UAAU,CAACa,UAAU,CAAC;EACxB,CAAC;EAED,MAAM4B,WAAW,GAAGA,CAACX,MAAM,EAAED,QAAQ,KAAK;IACxC,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACjC,OAAO,CAACkC,MAAM,EAACD,CAAC,EAAE,EAAC;MAC/B,IAAGjC,OAAO,CAACiC,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAC5B,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnC,OAAO,CAACiC,CAAC,CAAC,CAACxC,KAAK,CAACyC,MAAM,EAACC,CAAC,EAAE,EAAC;UACxC,MAAMK,WAAW,GAAGxC,OAAO,CAACiC,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC;UACvC,IAAGJ,MAAM,KAAKS,WAAW,CAACjD,EAAE,EAAC;YACzB,OAAOiD,WAAW,CAAC7C,QAAQ;UAC/B;QACF;MACF;IACF;EACJ,CAAC;EAEC,MAAMgD,QAAQ,GAAGA,CAACZ,MAAM,EAAED,QAAQ,EAAEc,OAAO,KAAK;IAC9C,MAAM9B,UAAU,GAAG,CAAC,GAAGd,OAAO,CAAC;IAC/B,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnB,UAAU,CAACoB,MAAM,EAACD,CAAC,EAAE,EAAC;MAClC,IAAGnB,UAAU,CAACmB,CAAC,CAAC,CAAC1C,EAAE,KAAKuC,QAAQ,EAAC;QAC/B,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACrB,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAACyC,MAAM,EAACC,CAAC,EAAE,EAAC;UAC3C,MAAMK,WAAW,GAAG1B,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC;UAC1C,IAAGJ,MAAM,KAAKS,WAAW,CAACjD,EAAE,EAAC;YACzBuB,UAAU,CAACmB,CAAC,CAAC,CAACxC,KAAK,CAAC0C,CAAC,CAAC,CAACzC,IAAI,GAAGkD,OAAO;UACzC;QACF;MACF;IACF;IACAzC,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACH,UAAU,CAAC,CAAC;IACxDb,UAAU,CAACa,UAAU,CAAC;EACxB,CAAC;EAED/B,SAAS,CAAC,MAAM;IACZ,IAAG,CAACoB,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAC;MAC/BD,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACjB,OAAO,CAAC,CAAC;IACvD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6C,kBAAkB,GAAG;IACxB7C,OAAO;IACPU,mBAAmB;IACnBQ,eAAe;IACfG,YAAY;IACZI,eAAe;IACfG,aAAa;IACbQ,UAAU;IACVE,gBAAgB;IAChBC,cAAc;IACdG,WAAW;IACXD,cAAc;IACdE;EACH,CAAC;EAED,oBACIvD,OAAA,CAACC,iBAAiB,CAACyD,QAAQ;IAACC,KAAK,EAAEF,kBAAmB;IAAA/C,QAAA,EACnDA;EAAQ;IAAAc,QAAA,EAAAoC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEnC,CAAC;AAAAnD,EAAA,CAvMYF,kBAAkB;AAAAsD,EAAA,GAAlBtD,kBAAkB;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}